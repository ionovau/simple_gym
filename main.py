import random
import  telebot
import psycopg2
from psycopg2 import pool
from telebot import types
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
telegram_bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
db_host = os.getenv("DB_HOST")
db_name = os.getenv("DB_NAME")
db_user = os.getenv("DB_USER")
db_password = os.getenv("DB_PASSWORD")
db_schema_name = os.getenv("DB_SCHEMA_NAME")

bot = telebot.TeleBot(telegram_bot_token)

# –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
connection_pool = pool.SimpleConnectionPool(
    minconn=1,
    maxconn=10,
    host=db_host,
    database=db_name,
    user=db_user,
    password=db_password
)

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
def execute_query(query, params=None):
    connection = None
    cursor = None
    try:
        connection = connection_pool.getconn()
        cursor = connection.cursor()
        cursor.execute(query, params)
        connection.commit()
    except Exception as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –≤ execute_query —Å PostgreSQL:", error)
        raise
    finally:
        if cursor:
            cursor.close()
        if connection:
            connection_pool.putconn(connection)

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö
def fetch_query_all(query, params=None):
    connection = None
    cursor = None
    try:
        connection = connection_pool.getconn()
        cursor = connection.cursor()
        cursor.execute(query, params)
        result = cursor.fetchall()
        return result
    except Exception as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –≤ fetch_query_all —Å PostgreSQL:", error)
        raise
    finally:
        if cursor:
            cursor.close()
        if connection:
            connection_pool.putconn(connection)

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö
def fetch_query_one(query, params=None):
    connection = None
    cursor = None
    try:
        connection = connection_pool.getconn()
        cursor = connection.cursor()
        cursor.execute(query, params)
        result = cursor.fetchone()
        return result
    except Exception as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –≤ fetch_query_one —Å PostgreSQL:", error)
        raise
    finally:
        if cursor:
            cursor.close()
        if connection:
            connection_pool.putconn(connection)

# –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö
@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    # –ï—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–ª–∏
    if message.text == "/start":

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
        try:
            query = f'''SELECT * FROM {db_schema_name}.user WHERE tg_id = '{message.from_user.id}';'''

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
            user = fetch_query_one(query)

            if user is None:
                msg = '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ç–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üòä'
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                execute_query(f'''INSERT INTO {db_schema_name}.user(tg_id, last_menu) VALUES ({message.from_user.id}, 'new_user');''')
            else:
                msg = '–ü—Ä–∏–≤–µ—Ç! –£–¥–∞—á–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üêí'

            keyboard = types.InlineKeyboardMarkup()
            key_start = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', callback_data='start')
            # –ò –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ —ç–∫—Ä–∞–Ω
            keyboard.add(key_start)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Å—Ä–∞–∑—É –∏ –ø–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ
            bot.send_message(message.from_user.id, text=msg, reply_markup=keyboard)

        except Exception as error:
            print("–û—à–∏–±–∫–∞ (get_text_messages) –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL:", error)
    else:
        bot.send_message(message.from_user.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏ /start.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):

    if call.data == "start":
        try:
            msg = '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–Ω—å'
            execute_query(f'''UPDATE {db_schema_name}.user SET last_menu = 'choose_day' WHERE tg_id = {call.from_user.id};''')
            keyboard = types.InlineKeyboardMarkup()
            key_new_training = types.InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–Ω—å', callback_data='new_training_day')
            key_back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_menu')
            # –ò –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ —ç–∫—Ä–∞–Ω
            keyboard.add(key_new_training)
            keyboard.add(key_back)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Å—Ä–∞–∑—É –∏ –ø–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ
            bot.send_message(call.from_user.id, text=msg, reply_markup=keyboard)
        except Exception as error:
            print("–û—à–∏–±–∫–∞ (callback_query_handler) –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL:", error)

    else:
        bot.send_message(call.from_user.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏ /start.")

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –æ–ø—Ä–æ—Å –±–æ—Ç–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ
bot.polling(none_stop=True, interval=0)